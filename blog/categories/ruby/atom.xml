<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Shiny happy people coding]]></title>
  <link href="http://blog-en.shingara.fr//blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog-en.shingara.fr//"/>
  <updated>2012-07-12T09:34:41+02:00</updated>
  <id>http://blog-en.shingara.fr//</id>
  <author>
    <name><![CDATA[Cyril Mougel]]></name>
    <email><![CDATA[cyril.mougel@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why I stop using decent_exposure]]></title>
    <link href="http://blog-en.shingara.fr//why-i-stop-using-decent-exposure.html"/>
    <updated>2012-07-11T09:49:00+02:00</updated>
    <id>http://blog-en.shingara.fr//why-i-stop-using-decent-exposure</id>
    <content type="html"><![CDATA[<p>After the release of <a href="https://github.com/voxdolo/decent_exposure">decent_exposure</a>, I was really happy.
I use before <a href="https://github.com/josevalim/inherited_resources/">inherited_ressources</a>, but
I started to discover some issue. If you want customize your controller,
it can be hard and not really readable and maintanable. Inherited
ressources is really great if you not want customize it. And you can't
test your controller directly with inherited ressources like explain on
the readme.</p>

<p>The big advantage of <code>decent_exposure</code> to me is the capability to access
variable directly in your views. No more need call instance variables.
You just need call the method directly. You have a eager loading of your
object because you not need instanciate in your controller if you don't
need into it. It's just instanciate when you want it. A memoization
system help you to avoid multiple DB call. This technique help the reuse
of some view or partial, because you don't need instanciate an instance
in your action. if you expose it you can call it easily. If this method
expose is not use, nothing happen. In your partial you can override some
variables expose by <code>:locals</code> params. I see a lot of interest in using
<code>decent_exposure</code></p>

<p>But after a usage of it. All this interest are add by using the
<code>helper_method</code> class method in your controller. So if you create a
method with eager loading inside and expose it with <code>helper_method</code> you
have you own decent exposure with builtin method and decent exposure
become useless.</p>

<p><code>decent_exposure</code> was to me a discover of usage and capability of
<code>helper_method</code>. But after using it on several real project, I think all
hiding code by decent exposure can be disturbing. By example, decent
exposure do an <code>update_attributes</code> on your object if a params of this
object is discover. So in some case I do this <code>update_attributes</code> twice.
One in expose method and one in my action. There are no big deal but in
some case it introduce some bug and it's hard to understand what happen
easily and you lost several hours to fix this bug.</p>

<p>Another limitation to me is the override of this expose. To avoid
multiple if inside, you can want assign your eager loading before
calling this expose method.</p>

<p>Une des limitations de <code>decent_exposure</code> selon moi est l'override de
cette méthode. Parfois pour éviter les <code>if</code> infini dans cette méthode il
est plus judicieux de définir directement la valeur de retour de cette
méthode dans sa méthode d'action. Cela permet de savoir exactement ce
que retourne cette méthode, mais aussi d'éviter les conflits dans
d'autre action.</p>

<p>Pour réalisé cela ma méthode stocke en mémoisation la variable
d'instance égale au nom de la méthode. Ainsi ma méthode ressemble à ceci
:</p>

<p><code>ruby
def post
  @post ||= Post.find(params[:id])
end
helper_method :post
</code></p>

<p>Si je souhaite donc avoir un nouveau Post retourné par cette méthode
j'ai juste à faire :</p>

<p><code>ruby
def new
  @post = Post.new
end
</code></p>

<p>Je surcharge le retour de la méthode post par la valeur <code>Post.new</code>. Pour
faire cela avec <code>decent_exposure</code> il faut surchargé la variable
<code>@_resource[:post]</code>. Mais rien ne m'assure que ce nom de variable d'instance
soit conservé dans les futurs version de <code>decent_exposure</code>. Une solution serait peut-être de créer une
méthode <code>post=()</code> lors de l'exposition d'un <code>post</code>, mais cela devient
peut-être moins pratique.</p>

<p>Voilà donc les raisons de mon arrêt d'utilisation de <code>decent_exposure</code>.
Je peux très facilement émuler le comportement de <code>decent_exposure</code> et
tout ça sans aucune dépendance externe.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dante lets you put some daemon in your code]]></title>
    <link href="http://blog-en.shingara.fr//dante-lets-you-put-some-daemon-in-your-code.html"/>
    <updated>2012-05-11T09:54:00+02:00</updated>
    <id>http://blog-en.shingara.fr//dante-lets-you-put-some-daemon-in-your-code</id>
    <content type="html"><![CDATA[<p>Few days ago, I needed to convert a ruby script into daemon.</p>

<p>In my deployment toolkit, I use monitrc to monitor my scripts. Monit
checks a pidfile to know if the process is running or not.</p>

<p>So, I looked the best ruby solution to easily to transform this script in deamon
generating its own pidfile.</p>

<p>The most popular project in ruby to convert a ruby script into daemon is
<a href="http://daemons.rubyforge.org/">daemons</a>. I've tried several times in the past
and never became fan. It's too complicated and doesn't generate pidfile.
You have to manage everything yourself.</p>

<p>The second big project about managing daemon in the ruby community is
<a href="https://github.com/kennethkalmer/daemon-kit">daemon-kit</a>. I've tried it
several times without success. To me, it's way too big and not
flexible enough to use on a simple daemon script.</p>

<p>Therefore, I decided to see if the ruby community had a new
gem for this purpose. I discovered <a href="https://github.com/bazaarlabs/dante">dante</a>.
This project was exactly what I really needed. It really gets the job done.</p>

<p>By default, Dante manages few options in commandline. These options
are all what you really need. No more useless stuff.</p>

<p>Default options available :</p>

<p>```</p>

<pre><code>-p, --port PORT           Specify port
                          (default: )
-P, --pid FILE            save PID in FILE when using -d option.
                          (default: /var/run/scheduler.pid)
-d, --daemon              Daemonize mode
-l, --log FILE            Logfile for output
-k, --kill [PORT]         Kill specified running daemons - leave
</code></pre>

<p>blank to kill all.</p>

<pre><code>-u, --user USER           User to run as
-G, --group GROUP         Group to run as
-?, --help                Display this usage information.
</code></pre>

<p>```</p>

<p>You can define the PID, the log file, the user and group launching this
daemon (if launched in root). The only argument which is not essential to me is
the PORT. But this gem was created to launch rack applications. So
it's really needed in this case.</p>

<p>An other great feature is the option extension. You can add some new
options. Dante manage to you all options pass on your script.</p>

<p>To use it, it's really simple. You just put <code>Dante.run</code> and put your
code in a block. :</p>

<p><code>ruby
Dante.run('myapp') do |opts|
  myapp.run
end
</code></p>

<p>I am really impressed by this gem by the <a href="http://gomiso.com">gomiso</a>
company. Thanks for creating such a good gem.</p>

<p><a href="http://blog.shingara.fr/dante-pour-mettre-du-daemon-dans-son-code.html">Traduction Française</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moped the new mongoDB ruby driver]]></title>
    <link href="http://blog-en.shingara.fr//moped-the-new-mongodb-ruby-driver.html"/>
    <updated>2012-05-07T09:38:00+02:00</updated>
    <id>http://blog-en.shingara.fr//moped-the-new-mongodb-ruby-driver</id>
    <content type="html"><![CDATA[<p>In December 2011, <a href="https://github.com/bernerdschaefer">Bernerd Schaefer</a> created a new MongoDB ruby driver.
This new driver is not supported by 10Gen (MongoDB creator) directly.
The official MongoDB ruby driver is the gem <a href="https://github.com/mongodb/mongo-ruby-driver">mongo-ruby-driver</a>.</p>

<h1>Goal of this gem</h1>

<p>This gem will be created after some frustration from the Mongoid Core
developer
The team proposed to change the internal software design on MongoDB Ruby driver but all changes were refused.</p>

<h2>Thread-safe</h2>

<p>One of this gem's goals was to have a more thread-safe gem than the official MongoDB ruby driver.
This official gem is sometimes considered like not 100% thread-safe like reported <a href="https://github.com/mperham/sidekiq/wiki/Problems-and-Troubleshooting">Mike Perham</a>.
Since the ruby community discovered again the thread, it hasn't stopped of being a real problem.
With Moped we can use <a href="http://mperham.github.com/sidekiq/">sidekiq</a>.</p>

<h2>No more extension</h2>

<p>If you want to use the MongoDB official driver, you will need to install another
gem <a href="http://rubygems.org/gems/bson_ext">bson_ext</a>.
Without it, you will have some performance penalties.
As this gem is a C extension, this gem has 2 versions in order to be compatible with JRuby.
One in C and the other in Java. It's therefore harder to maintain.</p>

<p>With Moped, no more extension needed.
Everything is done in pure ruby.
A benchmark shows that this moped's bson version is even faster than the C extension.</p>

<p>The only case where moped is slower than bson_ext is the ObjectId generation, like reported on <a href="https://groups.google.com/d/topic/mongoid/87IdIKO8-VM/discussion">Mongoid mailing-list</a>.
But, after all, Moped is new.
It can be improved in the future.</p>

<h2>Cleanest API</h2>

<p>The Moped API is really clean and simple.
It depends on the developers using it.
But, to me, it's a good API because it's really more "ruby way".</p>

<h2>Better Replicat Set management</h2>

<p>One of big feature of MongoDB is the ReplicatSet.
With Moped, the ReplicatSet management is even better.
There are no exception raise when a node is down.
The switch off of node is immediately done by Moped.</p>

<p>No need to list all of your node.
Moped does it automaticly with the MongoDB mechanism.
You can even add new nodes in your Replicat without restarting your application.</p>

<h1>Limitation</h1>

<p>Moped has some limitation in front of Mongo-ruby-driver.</p>

<h2>Ruby 1.9 only</h2>

<p>Moped works only with Ruby > 1.9. in order to avoid troubles with the 1.8 compatibilities.
For instance, the Socket on Ruby 1.8 series is not the best.</p>

<h2>No GridFS support</h2>

<p>GridFS is not supported on Moped.
This choice has been made to limit the size of the Moped code core.
In the future, this feature may be added in a Moped extension.</p>

<h1>Mongoid 3 integration</h1>

<p>Mongoid 3 now uses only MongoDB ruby driver.
Moped is a new dependency of Mongoid and mongo-ruby-driver is not anymore a dependencie.
If you want to try this new driver you can test it on Mongoid 3.</p>

<p>Warning: Mongoid 3 is still not released.
If you want to test it, you will need to use the Master branch on Mongoid.</p>

<p><code>ruby
gem 'mongoid', :git =&gt; 'git://github.com/mongoid/mongoid'
</code></p>

<p><a href="http://blog.shingara.fr/moped-le-nouveau-driver-mongodb-pour-ruby.html">French Translation</a></p>
]]></content>
  </entry>
  
</feed>
